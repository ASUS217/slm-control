function io

    global SLM MISC CONFIG FIG TARGET RESULT UI ROI

    panel = uipanel( ...
        'title', 'file i/o' ...
      , 'units', 'pixels' ...
      , 'parent', FIG.main ...
      , 'fontSize', 8 ...
      , 'position', [ ( 3 * MISC.padding + 380 ) ( 2 * MISC.padding + MISC.controls ) ( 180 + MISC.padding ) ( MISC.controls + MISC.padding ) ] ...
    );

    % load
    uicontrol( ...
        'style', 'text' ...
      , 'parent', panel ...
      , 'position', [ ( MISC.padding/2 + 5 ) ( MISC.padding/2 + MISC.controls/2 - 2 ) 30 20 ] ...
      , 'string', 'load:' ...
    );

        % target
        UI.io.load.target = uicontrol( ...
            'style', 'pushbutton' ...
          , 'parent', panel ...
          , 'position', [ ( MISC.padding/2 + 40 ) ( MISC.padding/2 + MISC.controls/2 ) 60 20 ] ...
          , 'string', 'target' ...
          , 'callback', @loadTarget ...
        );
    
        function loadTarget( varargin )
            [ filename, path ] = uigetfile( fullfile( CONFIG.dataPath, 'targets', '*.bmp' ), 'Select a target image to load' );
            if filename
                target = imread( fullfile( path, filename ) );
                TARGET.set( double( target( :, :, 1 ) ) / 255 );
            end
           
        end

        % pattern
        UI.io.load.pattern = uicontrol( ...
            'style', 'pushbutton' ...
          , 'parent', panel ...
          , 'value', 0 ...
          , 'position', [ ( MISC.padding + 100 ) ( MISC.padding/2 + MISC.controls/2 ) 70 20 ] ...
          , 'string', 'pattern' ...
          , 'callback', @loadPattern ...
        );
    
        function loadPattern( varargin )
            [ filename, path ] = uigetfile( fullfile( CONFIG.dataPath, 'patterns', '*.bmp' ), 'Select a pattern image to load' );
            if filename
                pattern = imread( fullfile( path, filename ) );
                pattern = pattern( :, :, 1 );
                if islogical( pattern )
                    pattern = uint8( pattern ) * 255;
                end
                SLM.update( pattern );
            end;
        end

    
    % save
    uicontrol( ...
        'style', 'text' ...
      , 'parent', panel ...
      , 'position', [ ( MISC.padding/2 + 5 ) ( MISC.padding/2 - 2 ) 30 20 ] ...
      , 'string', 'save:' ...
    );
        
        % pattern
        UI.io.save.pattern = uicontrol( ...
            'style', 'togglebutton' ...
          , 'parent', panel ...
          , 'value', 0 ...
          , 'position', [ ( MISC.padding/2 + 40 ) ( MISC.padding/2 ) 70 20 ] ...
          , 'string', 'pattern' ...
          , 'callback',  @savePattern ...
        );
    
        function savePattern( varargin )
            [ filename, path ] = uiputfile( fullfile( CONFIG.dataPath, 'patterns', '*.bmp' ), 'Select a file to save the pattern to' );
            if filename
                imwrite( SLM.pattern, fullfile( path, filename ) );
            end;
        end
    
        % hdr
        UI.io.save.hdr = uicontrol( ...
            'style', 'togglebutton' ...
          , 'parent', panel ...
          , 'value', 0 ...
          , 'position', [ ( MISC.padding/2 + 120 ) ( MISC.padding/2 ) 50 20 ] ...
          , 'string', 'hdr' ...
          , 'callback',  @saveHDR ...
        );
    
        function saveHDR( varargin )
            [ filename, path ] = uiputfile( fullfile( CONFIG.dataPath, 'hdrs', '*.mat' ), 'Select a file to save the HDR image to' );
            if filename
                hdr = RESULT.hdr; %#ok<NASGU>
                target = TARGET.scaled; %#ok<NASGU>
                roi = ROI.index; %#ok<NASGU>
                save( fullfile( path, filename ), 'hdr', 'target', 'roi' );
            end;
        end


end